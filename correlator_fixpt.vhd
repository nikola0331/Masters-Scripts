-- -------------------------------------------------------------
-- 
-- File Name: /home/nikola/Documents/MATLAB/Correlator/codegen/correlator/hdlsrc/correlator_fixpt.vhd
-- Created: 2024-03-13 14:20:42
-- 
-- Generated by MATLAB 23.2, MATLAB Coder 23.2 and HDL Coder 23.2
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- avg_vals                      ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: correlator_fixpt
-- Source Path: correlator_fixpt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY correlator_fixpt IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        x_1                               :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En6
        x_2                               :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En6
        ce_out                            :   OUT   std_logic;
        avg_vals                          :   OUT   std_logic_vector(13 DOWNTO 0)  -- ufix14
        );
END correlator_fixpt;


ARCHITECTURE rtl OF correlator_fixpt IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL count                            : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL count_1                          : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL tmp                              : std_logic;
  SIGNAL tmp_1                            : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL tmp_2                            : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL val1                             : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL tmp_3                            : std_logic;
  SIGNAL x_1_signed                       : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL x_2_signed                       : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL tmp_4                            : std_logic;
  SIGNAL sum                              : unsigned(13 DOWNTO 0);  -- ufix14_E4
  SIGNAL sum_1                            : unsigned(13 DOWNTO 0);  -- ufix14_E4
  SIGNAL tmp_5                            : unsigned(13 DOWNTO 0);  -- ufix14_E4
  SIGNAL val2                             : unsigned(13 DOWNTO 0);  -- ufix14_E4
  SIGNAL p14sum_mul_temp                  : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL p14sum_add_cast                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL p14sum_add_cast_1                : unsigned(18 DOWNTO 0);  -- ufix19
  SIGNAL p14sum_add_temp                  : unsigned(18 DOWNTO 0);  -- ufix19
  SIGNAL tmp_6                            : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL p13tmp_cast                      : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL tmp_7                            : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL val3                             : unsigned(13 DOWNTO 0);  -- ufix14

BEGIN
  -- HDL code generation from MATLAB function: correlator_fixpt_trueregionp10
  count <= to_unsigned(16#00#, 5);

  enb <= clk_enable;

  
  tmp <= '1' WHEN count_1 >= to_unsigned(16#10#, 5) ELSE
      '0';

  
  tmp_1 <= count_1 WHEN tmp = '0' ELSE
      count;

  tmp_2 <= tmp_1(3 DOWNTO 0);

  val1_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      val1 <= to_unsigned(16#0#, 4);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        val1 <= tmp_2;
      END IF;
    END IF;
  END PROCESS val1_reg_process;


  -- HDL code generation from MATLAB function: correlator_fixpt
  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  --                                                                          %
  --          Generated by MATLAB 23.2 and Fixed-Point Designer 23.2          %
  --                                                                          %
  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- initilizing val1 = count, val2 = running sum, val3 = avg of prev
  -- multiplying the values together 
  count_1 <= resize(val1, 5) + to_unsigned(16#01#, 5);

  
  tmp_3 <= '1' WHEN count_1 >= to_unsigned(16#10#, 5) ELSE
      '0';

  x_1_signed <= signed(x_1);

  x_2_signed <= signed(x_2);

  
  tmp_4 <= '1' WHEN count_1 >= to_unsigned(16#10#, 5) ELSE
      '0';

  -- HDL code generation from MATLAB function: correlator_fixpt_trueregionp3
  sum <= to_unsigned(16#0000#, 14);

  
  tmp_5 <= sum_1 WHEN tmp_4 = '0' ELSE
      sum;

  val2_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      val2 <= to_unsigned(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        val2 <= tmp_5;
      END IF;
    END IF;
  END PROCESS val2_reg_process;


  p14sum_mul_temp <= x_1_signed * x_2_signed;
  p14sum_add_cast <= unsigned(p14sum_mul_temp(25 DOWNTO 12));
  p14sum_add_cast_1 <= resize(val2 & '0' & '0' & '0' & '0', 19);
  p14sum_add_temp <= resize(p14sum_add_cast, 19) + p14sum_add_cast_1;
  sum_1 <= p14sum_add_temp(17 DOWNTO 4);

  -- HDL code generation from MATLAB function: correlator_fixpt_trueregionp7
  p13tmp_cast <= sum_1 & '0' & '0' & '0' & '0';
  tmp_6 <= resize(SHIFT_RIGHT(p13tmp_cast, 4), 14);

  val3_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      val3 <= to_unsigned(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        val3 <= tmp_7;
      END IF;
    END IF;
  END PROCESS val3_reg_process;


  
  tmp_7 <= val3 WHEN tmp_3 = '0' ELSE
      tmp_6;

  avg_vals <= std_logic_vector(tmp_7);

  ce_out <= clk_enable;

END rtl;
